'''
Принцип работы будет следующий:
1. Считаем данные из csv для атаки (ddos_src.csv)
2. Выберем какой-нибудь комьютер (ip-адрес) источника атаки. В дальнейшем его будет выбирать
   пользователь в графическом интерфейсе
3. Выберем какой-нибудь комьютер из его списка жертв (поле Dst IP). В дальнейшем его будет выбирать
   пользователь в графическом интерфейсе
4. Сгенерируем пакеты для ddos атаки при помощи программы scapy
5. НЕ БУДЕМ!!! Никуда отправлять пакеты (мы не же хакеры, а просто учимся). Вместо
   Этого мы запишем информацию о пакетах в файлы .pcap - чтобы Вы могли на защите показать,
   что пакеты для атаки действительно формируются
6. Считаем данные из каждого .pcap файла (опять же библиотекой scapy)
7. Сгенерируем из этих данных о пакетах датасет в формате .csv, который Вы сможете "скормить"
   Вашей модели машинного обучения и нейронной сети

'''

import csv

import random
import datetime
from scapy.all import *

file = open("ddos_src.csv", "r")

csv_reader = csv.DictReader(file, delimiter=",")

ddos_data = []


for data in csv_reader:
    ddos_data.append(data)
ports = ddos_data[0]['Src Port'].split(" ")
# print(len(ports))

file.close()


# Шаг 2. Выбираем бота (комьпютер-источник атаки)

source = random.choice(ddos_data)

source_ip = source['Src IP']
# выбираем случайным образом порт для атаки (исходящий порт)
source_port = int(random.choice(source['Src Port'].split(' ')))
protocol = int(random.choice(source['Protocol'].split(' ')))
packets_count = int(float(source['Tot Fwd Pkts']))

# Шаг 3. Выбираем комьпютер жертву
dest_ip = random.choice(source['Dst IP'].split(' '))
dest_port = int(random.choice(source['Dst Port'].split(' ')))

'''
Принципы атаки следущие:

1. Нам нужно выбрать ip-адрес машины жертвы. Тут возможны варианты - вибирать ip-адрес из существующего датасета
   либо взять любой другой. А так же выбрать время атаки

2. Выбрать подмножество наших машин для атаки. Не обязательно атаковать всеми машинами. Для атаки обычно
   использовалось, судя по датасету, от 5 до 20 машин-ботов. Они отправляли пакеты в разное время, но в
   итоге в каждую секунду времени число пакетов было большим

3. Проанализировав датасет я выяснил, что во время ddos на всех машинах-жертвах в этом датасете были атакованы
   только порты 80 и 443. Эти порты относятся к протоколам http  и https - т.е. к протоколам передачи
   гиппертекстовых ссылок, т.е. интернет-страниц и других ресурсов сайтов. Т.е. атакованы были именно
   веб-сервера, на которых находятся какие-то сайты или сервера с данными. Соответственно генерировать будем
   пакеты для атаки именно этих портов

4. Дальнейший анализ полученных из датасета данных показал, что в большинстве случаев атака происходила
   по протоколу tcp (протокол № 6), гораздо реже по протоколу udp (протокол №17). Соответственно и генерировать
   будем пакеты для этих протоколов с мусорными данными. Это так называемые tcp-флуд и udp-флуд (флуд с англ. и
   означает - мусор)

5. Сгенерировать каким-то случайным подмножеством наших машин пакеты для атаки. Для атаки будем применять
   принцип флуда - когда комьпьютер бот посылает на компьютер-жертву небольшое количество пакетов с небольшими
   данными, при этом заставляя комьютер жертву отвечать гораздо большими по объему ответами, заставляя занимать
   большую полосу Интернет-канала жертвы. В разультате нормальные пользовательские запросы просто не могут
   пройти до сервера-жертвы в связи с тем, что канал связи полностью забит флудом (мусорными данными). И сайты
   на этом сервере становятся недоступными

6. Далее сохраняем эти пакеты в папку с ip-адресом жертвы и датой старта атаки. Сами пакеты будут сохранены
   в файлы .pcap с ip-адресом атакующей машины и датой/временем атаки. Я покажу пример для нескольких машин
'''


dest_ip = input("Введите ip-адрес жертвы: ")

# Атакуемые порты
dest_ports = map(int, input("Укажите через пробел атакуемые порты (80/443):").split(' '))

attack_time = int(input("Укажите время атаки в секундах: "))

# число машин для атаки 
bots_count = random.randint(5, len(ddos_data))

ddos_packets = {}
# Пока последовательно позже параллельно

start_timestamp = datetime.now().timestamp()

current_timestamp = start_timestamp

while current_timestamp < start_timestamp + attack_time:

   for i in range(bots_count):
      # получаем необходимые для отправки данные комьютера-бота

      # для примера возьмём время отправки пакетов раз в секунду.
      time_duration = 1
      source = random.choice(ddos_data)
      source_ip = source['Src IP']
      source_port = int(random.choice(source['Src Port'].split(' ')))
      protocol = int(random.choice(source['Protocol'].split(' ')))
      packets_count = int(float(source['Tot Fwd Pkts']))

      flags = []

      # формируем случайным образом данные пакеты (имеется ввиду полезные данные, передаваемые в программу)
      # размер этих данных можно подобрать таким, чтобы общий размер пакетов был примерно равен тем размерам
      # что указаны в нашем датасете (поле "Fwd Pkt Len Mean"). Здесь для примера взято значение 1024. Т.е.
      # будет сгенерировано последовательность из 1024 абсолютно случайных байт
      data = random._urandom(1024)

      if source_port == 6:
         transport_protocol = TCP(sport=source_port, dport=dest_ports)

         if source['SYN Flag Cnt']:
            flags.append('S')

         if source['ACK Flag Cnt']:
            flags.append('A')

         if source['RST Flag Cnt']:
            flags.append('R')

         if source['URG Flag Cnt']:
            flags.append('U')

         if source['FIN Flag Cnt']:
            flags.append('F')

         if source['CWE Flag Cnt']:
            flags.append('E')

         if source['CWE Flag Cnt']:
            flags.append('P')
      else:
         transport_protocol = UDP(dport=int(source_port))

      if source_ip not in ddos_packets:
         # для каждой машины бота создаём свой список пакетов
         ddos_packets[source_ip] = []

      # построение пакета
      packet = IP(dst=dest_ip)/transport_protocol/data

      current_packets = [packet] * packets_count

      # Для некоторых из пакетов могут быть установлены флаги протокола TCP. Выберем значения числа флагов
      # из полученного нами набора данных и установим для случайных пакетов данные флаги.т.к.
      # в нашем случае в изначальном датасете было указано только количество установленных флагов, то при
      # генерации пакетов неважно в каких пакетах какие из флагов мы установим. Да и установках флагов в
      # случайной последовательности в любом случае дополнительно нагрузит атакуемую систему
      if source_port == 6:
         for flag in flags:
            packet = random.choice(current_packets)
            packet[TCP].flags += flag

      # устанавливаем временные метки для каждого из пакетов
      for packet in current_packets:
         packet.time = current_timestamp + time_duration
         time_duration += 1

      # сохраняем данные пакетов в словарь с ключом в виде ip атакующей машины
      ddos_packets[source_ip] += current_packets

   current_timestamp += time_duration

# создаем папку с данными атаки (общая папка "attack_data" - будет лежать рядом с файлом generator.py)
if not os.path.exists('attack_data'):
   os.mkdir('attack_data')

# создаем папку с данными атаки для конкретной жертвы - папка с её ip-адресом
# она будет распологаться в общей папке с данными атак "attack_data"
if not os.path.exists(os.path.join('attack_data', dest_ip)):
   os.mkdir(os.path.join('attack_data', dest_ip))

# в папке с данными жертвы создаем файлы .pcap со сгенерированными сетевыми пакетами. каждый файл
# содержит в названии ip-адрес машины-бота и дату/время записи файла
for ip, packets in ddos_packets.items():
   pcap_filename = f"{ip}_{datetime.today().strftime('%d.%m.%Y_%H-%M-%S')}.pcap"
   wrpcap(os.path.join('attack_data', dest_ip, pcap_filename), packets)
